# SECRETS / CONFIGMAPS
---
# Docker Registry Credentials
apiVersion: v1
kind: Secret
metadata:
  name:  regcred-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: athena-{{ .Release.Name }}
    name: regcred-{{ .Release.Name }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "eyJhdXRocyI6eyJ1aWRwcmVnLmF6dXJlY3IuaW8iOnsidXNlcm5hbWUiOiJ1aWRwcmVnIiwicGFzc3dvcmQiOiJLaGZEdD1FPUcwOStQWGtoSW9CV2xXWkQ1MlBLR2VUcCIsImVtYWlsIjoiZ2x5bi5ib3dkZW5AaHBlLmNvbSIsImF1dGgiOiJkV2xrY0hKbFp6cExhR1pFZEQxRlBVY3dPU3RRV0d0b1NXOUNWMnhYV2tRMU1sQkxSMlZVY0E9PSJ9fX0="
---
# VOLUME CREATE
---
{{ if .Values.volumes.create -}}
{{ if .Values.volumes.createclass -}}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
{{ end -}}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-athena-training-data-{{ .Release.Name }}
spec:
  capacity:
    storage: {{ .Values.volumes.size }}
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    path: {{ .Values.volumes.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: role
          operator: In
          values:
          - mltraining
{{ end -}} 
---
# VOLUME CLAIM
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-athena-training-data-{{ .Release.Name }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.volumes.size }}
  storageClassName: local-storage
---
# SERVICES
---
# tensorflow-train Service
apiVersion: v1
kind: Service
metadata:
  name: tensorflow-train-{{ .Release.Name }}
  labels:
    app: athena-{{ .Release.Name }}
    component: tensorflow-train-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 8888
    targetPort: 8888
    name: jupyter-{{ .Release.Name }}
  selector:
    app: athena-{{ .Release.Name }}
    component: tensorflow-train-{{ .Release.Name }}
  type: {{ .Values.portType }}
---
# DEPLOYMENTS
---
# tensorflow-train Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tensorflow-train-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: athena-{{ .Release.Name }}
    component: tensorflow-train-{{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: athena-{{ .Release.Name }}
      component: tensorflow-train-{{ .Release.Name }}
  template:
    metadata:
      name: tensorflow-train-{{ .Release.Name }}
      labels:
        app: athena-{{ .Release.Name }}
        component: tensorflow-train-{{ .Release.Name }}
    spec:
      containers:
      - name: tensorflow-train-{{ .Release.Name }}
        image: tensorflow/tensorflow:latest{{ if gt .Values.gpu.count 0.0 }}-gpu{{ end }}
        command: ["jupyter"]
        args: ["notebook", "--allow-root"]
        env:
        - name: PASSWORD
          value: {{ .Values.jupyterPassword }}
        imagePullPolicy: Always
        {{ if gt .Values.gpu.count 0.0 -}}
        resources:
          limits:
            nvidia.com/gpu: !!int {{ .Values.gpu.count }}
        {{ end -}}
        ports:
        - containerPort: 8888
        volumeMounts:
        - mountPath: /notebooks
          name: pv-athena-training-data-{{ .Release.Name }} 
      volumes: 
      - name: pv-athena-training-data-{{ .Release.Name }}
        persistentVolumeClaim:
          claimName: pvc-athena-training-data-{{ .Release.Name }}
      nodeSelector:
        role: mltraining
